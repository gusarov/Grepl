variables:
  buildConfiguration: 'Release'

jobs:
- job: Windows
  displayName: 'Build on Windows'
  pool:
    name: default
    demands:
    - SpecialSoftware
    - Agent.OS -equals Windows_NT
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '3.1.x'

  - powershell: |
      function Edit-XmlNodes {
       param (
           [string] $file = $(throw "file is a required parameter"),
           [string] $xpath = $(throw "xpath is a required parameter"),
           [string] $value = $(throw "value is a required parameter")
       )
       [System.IO.Directory]::SetCurrentDirectory((Get-Location))
       $doc = [xml](Get-Content $file)
       "edit $file $xpath $value"
       $namespace = $doc.DocumentElement.NamespaceURI
       "namespace = $namespace"
       $ns = New-Object System.Xml.XmlNamespaceManager($doc.NameTable)
       $ns.AddNamespace("ns", $namespace)
       $nodes = $doc.SelectNodes($xpath, $ns)
       foreach ($node in $nodes) {
           "node found " + $node
           if ($node -ne $null) {
               if ($node.NodeType -eq "Element") {
                   "node inner replaced to " + $value
                   $node.InnerXml = $value
               }
               else {
                   "node value replaced to " + $value
                   $node.Value = $value
               }
           }
       }
       $doc.save($file)
       "done..."
      }
      $ver=$env:BUILD_SOURCEBRANCHNAME
      $ver = $ver.TrimStart('v')
      "ver="
      $v = [Version]"0.0.0"
      if ([System.Version]::TryParse($ver, [ref] $v)) {
        Edit-XmlNodes "grepl\grepl.csproj" "//ns:Version" $ver
      }
    displayName: 'Update Version'

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      arguments: '--configuration $(BuildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: Test
    inputs:
      command: test
      arguments: '--configuration $(BuildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: Pack as tool
    inputs:
      command: pack
      packagesToPack: grepl/grepl.csproj
      configuration: '$(BuildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: Publish win-x64
    inputs:
      command: publish
      publishWebProjects: false
      projects: 'grepl\grepl.csproj'
      arguments: '-c $(BuildConfiguration) -r win-x64 -p:PublishSingleFile=true --self-contained false'
      zipAfterPublish: false
      modifyOutputPath: false
  - task: CopyFiles@2
    inputs:
      Contents: 'Grepl\bin\Release\netcoreapp3.1\win-x64\publish\**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/win-x64'
      flattenFolders: true
  - task: DotNetCoreCLI@2
    displayName: Publish linux-x64
    inputs:
      command: publish
      publishWebProjects: false
      projects: 'grepl/grepl.csproj'
      arguments: '-c $(BuildConfiguration) -r linux-x64 -p:PublishSingleFile=true --self-contained false'
      zipAfterPublish: false
      modifyOutputPath: false
  - task: CopyFiles@2
    inputs:
      Contents: 'Grepl\bin\Release\netcoreapp3.1\linux-x64\publish\**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/linux-x64'
      flattenFolders: true
  - task: DotNetCoreCLI@2
    displayName: Publish linux-arm
    inputs:
      command: publish
      publishWebProjects: false
      projects: 'grepl/grepl.csproj'
      arguments: '-c $(BuildConfiguration) -r linux-arm -p:PublishSingleFile=true --self-contained false'
      zipAfterPublish: false
      modifyOutputPath: false
  - task: CopyFiles@2
    inputs:
      Contents: 'Grepl\bin\Release\netcoreapp3.1\linux-arm\publish\**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/linux-arm'
      flattenFolders: true
  - task: DotNetCoreCLI@2
    displayName: Publish linux-arm64
    inputs:
      command: publish
      publishWebProjects: false
      projects: 'grepl/grepl.csproj'
      arguments: '-c $(BuildConfiguration) -r linux-arm64 -p:PublishSingleFile=true --self-contained false'
      zipAfterPublish: false
      modifyOutputPath: false
  - task: CopyFiles@2
    inputs:
      Contents: 'Grepl\bin\Release\netcoreapp3.1\linux-arm64\publish\**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/linux-arm64'
      flattenFolders: true
  - task: DotNetCoreCLI@2
    displayName: Publish osx-x64
    inputs:
      command: publish
      publishWebProjects: false
      projects: 'grepl\grepl.csproj'
      arguments: '-c $(BuildConfiguration) -r osx-x64 -p:PublishSingleFile=true --self-contained false'
      zipAfterPublish: false
      modifyOutputPath: false
  - task: CopyFiles@2
    inputs:
      Contents: 'Grepl/bin/Release/netcoreapp3.1/osx-x64/publish/**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/osx-x64'
      flattenFolders: true

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'

- job: Linux
  displayName: 'Build on Linux'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
#  - task: UseDotNet@2
#    inputs:
#      packageType: 'sdk'
#      version: '3.1.x'
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      arguments: '--configuration $(BuildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: Test
    inputs:
      command: test
      arguments: '--configuration $(BuildConfiguration)'

- job: macOS
  displayName: 'Build on macOS'
  pool:
    vmImage: 'macOS-latest'
  steps:
#  - task: UseDotNet@2
#    inputs:
#      packageType: 'sdk'
#      version: '3.1.x'
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      arguments: '--configuration $(BuildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: Test
    inputs:
      command: test
      arguments: '--configuration $(BuildConfiguration)'
